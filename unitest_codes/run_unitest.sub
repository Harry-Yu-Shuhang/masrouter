#!/bin/bash

#SBATCH --partition=3090                     # ✅ 使用 3090 分区
#SBATCH --nodelist=aisurrey12                # ✅ 指定 3090 空闲节点
#SBATCH --job-name=masrouter_3090            # ✅ 任务名称
#SBATCH --nodes=1                            # ✅ 1 个节点
#SBATCH --ntasks=1                           # ✅ 启动 1 个进程（和 GPU 对应）
#SBATCH --gpus-per-node=1                    # ✅ 每节点 1 张 GPU
#SBATCH --cpus-per-task=8                    # ✅ 每进程 8 核 CPU
#SBATCH --time=12:00:00                      # ✅ 最长运行 12 小时
#SBATCH --mem=64G                            # ✅ 申请内存
#SBATCH --output=output.log                  # ✅ 标准输出日志
#SBATCH --error=error.log                    # ✅ 错误日志

echo "🔍 任务开始，当前目录: $(pwd)" > output.log
cd $SLURM_SUBMIT_DIR || { echo "❌ 目录不存在，退出"; exit 1; }
echo "📌 进入目录: $SLURM_SUBMIT_DIR" >> output.log

# ✅ 设定 CUDA 内存管理策略
export PYTORCH_CUDA_ALLOC_CONF="expandable_segments:True"

# ✅ 加载 module 系统
if [ -f /etc/profile.d/modules.sh ]; then
    source /etc/profile.d/modules.sh
else
    echo "⚠️ modules.sh 文件不存在，跳过 module 相关操作" >> output.log
fi

# ✅ 加载 CUDA（适配 3090，建议 CUDA 11.8）
AVAILABLE_CUDA=$(module spider cuda 2>&1 | grep -Eo 'cuda/11\.8' | tail -n1)
if [[ -n "$AVAILABLE_CUDA" ]]; then
    module load $AVAILABLE_CUDA
    echo "✅ 加载 CUDA 版本: $AVAILABLE_CUDA" >> output.log
else
    echo "⚠️ 找不到 CUDA 11.8，尝试使用系统 CUDA" >> output.log
fi

# ✅ 检查 GPU
echo "🔍 GPU 设备信息：" >> output.log
nvidia-smi >> output.log 2>>error.log || { echo "⚠️ GPU 检测失败，可能使用 CPU" >> output.log; }

# ✅ 激活 uv 环境
echo "🚀 激活 uv 环境" >> output.log
pip install uv >> output.log 2>>error.log || { echo "⚠️ uv 安装失败" >> output.log; }
echo "🚀 升级 transformers..." >> output.log
uv pip install "transformers>=4.38.0" --upgrade >> output.log 2>> error.log
uv sync >> output.log 2>>error.log || { echo "⚠️ uv sync 失败" >> output.log; }

# ✅ 运行训练脚本
echo "🚀 开始单元测试." >> output.log
uv run unitest/unitest.py >> output.log 2>>error.log || { echo "❌ 训练失败" >> output.log; exit 1; }

echo "✅ 任务完成" >> output.log
